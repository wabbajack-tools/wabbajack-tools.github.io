@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.ModlistInfo
@using Wabbajack.Web.Services
@using Wabbajack.Web.Utils
@using System.Threading
@inject IStateContainer StateContainer;
@implements IDisposable

<div class="max-w-6xl mx-auto bg-black-900">

    <div class="overflow-hidden max-w-full relative">
        <div class="w-full bg-gray-900 relative">
            @if (_currentModlist != null)
            {
                <a href="@ModlistInfo.CreateRedirect(_currentModlist.RepositoryName, _currentModlist.Links.MachineURL)">
                    @* ReSharper disable once ConditionIsAlwaysTrueOrFalse *@
                    @if (_currentModlist.ValidationSummary.LargeImage != null)
                    {
                        <img class="w-full aspect-video"
                             loading="eager"
                             src="@_currentModlist.ValidationSummary.LargeImage"

                             alt="Image of Modlist @_currentModlist.Title"/>
                    }
                    else
                    {
                        @* ReSharper disable once HeuristicUnreachableCode *@
                        <img class="w-full aspect-video"
                             loading="eager"
                             src="https://raw.githubusercontent.com/wabbajack-tools/wabbajack/main/Wabbajack.App.Wpf/Resources/Wabba_Mouth_No_Text.png"
                             alt="Image of Modlist @_currentModlist.Title"/>
                    }

                </a>

                <div class="absolute w-full bottom-0 bg-gray-900 bg-opacity-80 h-12 flex justify-center pt-1">
                    <a class="hover:underline flex gap-2" href="@ModlistInfo.CreateRedirect(_currentModlist.RepositoryName, _currentModlist.Links.MachineURL)">
                        <h3 class="text-md sm:text-2xl text-center font-semibold">@_currentModlist.Title</h3>
                        <p class="text-md sm:text-2xl text-center font-light">(@_currentModlist.Game.GetDescription())</p>
                    </a>
                </div>
            }
        </div>

        <div class="flex justify-between absolute top-1/2 w-full" style="transform: translateY(-50%)">
            <button @onclick="@(() => UpdateModlistPosition(false))"
                    class="rounded-full bg-wabbajack-background-darker w-10 h-10 ml-3 text-lg font-semibold"
                    aria-label="Previous Modlist">&lt;</button>
            <button @onclick="@(() => UpdateModlistPosition(true))"
                    class="rounded-full bg-wabbajack-background-darker w-10 h-10 mr-3 text-lg font-semibold"
                    aria-label="Next Modlist">&gt;</button>
        </div>
    </div>

</div>

@code {
    private readonly CancellationTokenSource _cts = new();

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private List<ModlistMetadata> _filteredModlists;

    private int _currentModlistIndex = 0;
    private ModlistMetadata _currentModlist;

    private bool _errorLoadingModlists;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await StateContainer.LoadData(_cts.Token);
            if (!res)
            {
                _errorLoadingModlists = true;
                return;
            }

            var filteredModlists = StateContainer.GetFeaturedModlists()
                .Where(x => !x.ForceDown)
                .Where(x => !x.NSFW)
                .OrderBy(_ => Guid.NewGuid())
                .ToList();

            _filteredModlists = filteredModlists;
            _currentModlist = filteredModlists.First();
        }
        finally
        {
            _shouldRender = true;
        }
    }

    private void UpdateModlistPosition(bool isNext)
    {
        _shouldRender = false;

        try
        {
            if (isNext)
            {
                if (_currentModlistIndex == _filteredModlists.Count - 1)
                    _currentModlistIndex = 0;
                else
                    _currentModlistIndex++;
                _currentModlist = _filteredModlists[_currentModlistIndex];
            }
            else
            {
                if (_currentModlistIndex == 0)
                    _currentModlistIndex = _filteredModlists.Count - 1;
                else
                    _currentModlistIndex--;
                _currentModlist = _filteredModlists[_currentModlistIndex];
            }
        }
        finally
        {
            _shouldRender = true;
        }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
