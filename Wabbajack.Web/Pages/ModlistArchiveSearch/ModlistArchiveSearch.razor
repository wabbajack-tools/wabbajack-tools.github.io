@page "/search/{repositoryName}/{modlistName}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs.DownloadStates
@using Wabbajack.DTOs
@using Wabbajack.DTOs.ModListValidation
@using Wabbajack.Common
@using System.Threading
@inject IStateContainer StateContainer;
@implements IDisposable

<PageTitle>Archive Search | Wabbajack</PageTitle>

<div class="m-8 flex-grow">
    @if (_modlistStatus == null)
    {
        @if (_errorLoadingStatusReport)
        {
            @ErrorComponent.RenderError($"Error loading status report for {MachineUrl}")
        } else if (_errorFindingStatusReport)
        {
            @ErrorComponent.RenderError($"Error finding status report for {MachineUrl}")
        } else if (_isForcedDown)
        {
            @ErrorComponent.RenderError("Modlist has been forced down. Status report is not available.")
        }
        else
        {
            @LoadingComponent.RenderLoadingThing("Loading status report...")
        }
    }
    else
    {
        <h1 class="font-semibold my-1 text-3xl text-center">Archive Search: @_modlistStatus.Name</h1>

        <div class="w-full overflow-hidden">
            <div class="p-4 min-w-full overflow-x-auto  bg-wabbajack-cards-background-base rounded-md">
                <table class="min-w-full divide-y divide-wabbajack-background">
                    <caption class="mb-3">Use Archive Search to look through all files a Modlist downloads.</caption>
                    <thead class="rounded-md bg-wabbajack-cards-background-hover">

                    <tr class="bg-wabbajack-background-dark">
                        <th colspan="3" class="py-2 text-right px-3">
                            <label for="search-archive">Search by Name:</label>
                            <input class="appearance-none focus:outline-0 border-hidden text-black-900 sm:text-sm p-1" @bind="_searchString" id="search-archive" type="search" maxlength="100"/>
                        </th>
                    </tr>

                    <tr class="text-md font-semibold tracking-wide text-left ">
                        <th @onclick="() => SwitchSorting(SortBy.ArchiveName)" class="px-6 py-3 hover:underline hover:cursor-pointer">Archive Name</th>
                        <th @onclick="() => SwitchSorting(SortBy.MetaName)" class="px-6 py-3 hover:underline hover:cursor-pointer">Name</th>
                        <th @onclick="() => SwitchSorting(SortBy.Size)" class="px-6 py-3 hover:underline hover:cursor-pointer">Size</th>
                    </tr>

                    </thead>
                    <tbody class="divide-y divide-wabbajack-background">
                    @foreach (var archive in Archives)
                    {
                        <tr @key="archive.Name" class="bg-wabbajack-background-dark">
                            @_renderRow(archive)
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public string RepositoryName { get; set; }

    [Parameter]
    public string ModlistName { get; set; }

    private string MachineUrl => $"{RepositoryName}/{ModlistName}";

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private bool _errorLoadingStatusReport;
    private bool _errorFindingStatusReport;
    private bool _isForcedDown;

    private enum SortBy
    {
        ArchiveName,
        MetaName,
        Size
    }

    private SortBy _sortBy = SortBy.ArchiveName;
    private bool _sortAscending = true;

    private ValidatedModList _modlistStatus;
    private IEnumerable<Archive> Archives => SortArchives(_modlistStatus.Archives
        .Select(x => x.Original)
        .Where(ShouldRenderArchive));

    private string _searchString;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (RepositoryName is null || ModlistName is null) return;

            var res = await StateContainer.LoadStatusReport(MachineUrl, _cts.Token);
            if (!res)
            {
                _errorLoadingStatusReport = true;
                return;
            }

            if (!StateContainer.TryGetModlistStatusReport(MachineUrl, out var statusReport))
            {
                _errorFindingStatusReport = true;
                return;
            }

            if (statusReport.Status == ListStatus.ForcedDown)
            {
                _isForcedDown = true;
            }
            else
            {
                _modlistStatus = statusReport;
            }
        }
        finally
        {
            _shouldRender = true;
        }
    }

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private static readonly RenderFragment<Archive> _renderRow = archive => __builder =>
    {
        var archiveName = archive.Name;
        var metaName = GetMetaName(archive);

        if (archiveName.Equals(metaName, StringComparison.OrdinalIgnoreCase))
        {
            <td colspan="2" class="px-6 py-4 font-light">@archive.Name</td>
        }
        else
        {
            <td class="px-6 py-4 font-light">@archive.Name</td>
            <td class="px-6 py-4 font-light">@GetMetaName(archive)</td>
        }

        <td class="px-6 py-4 font-light whitespace-nowrap">@archive.Size.ToFileSizeString()</td>
    };

    private static string GetMetaName(Archive archive, bool returnEmpty = false)
    {
        var state = archive.State;
        var name = state switch
        {
            Nexus nexusState => nexusState.Name ?? string.Empty,
            IMetaState metaState => metaState.Name ?? string.Empty,
            _ => returnEmpty ? string.Empty : archive.Name
        };

        return string.IsNullOrEmpty(name) ? returnEmpty ? string.Empty : archive.Name : name;
    }

    private bool ShouldRenderArchive(Archive archive)
    {
        // returns true if the item should be displayed in the table
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        var archiveName = archive.Name;
        if (archiveName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (GetMetaName(archive).Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }

    private void SwitchSorting(SortBy newSortBy)
    {
        if (_sortBy == newSortBy)
        {
            _sortAscending = !_sortAscending;
        }
        else
        {
            _sortBy = newSortBy;
            _sortAscending = true;
        }
    }

    private IEnumerable<Archive> SortArchives(IEnumerable<Archive> enumerable)
    {
        return _sortBy switch
        {
            SortBy.ArchiveName => _sortAscending ? enumerable.OrderBy(x => x.Name) : enumerable.OrderByDescending(x => x.Name),
            SortBy.MetaName => _sortAscending ? enumerable.OrderBy(x => GetMetaName(x, true)) : enumerable.OrderByDescending(x => GetMetaName(x, true)),
            SortBy.Size => _sortAscending ? enumerable.OrderBy(x => x.Size) : enumerable.OrderByDescending(x => x.Size),
            _ => throw new NotImplementedException()
        };
    }

    public static string CreateRedirect(string repo, string machineUrl) => $"/search/{repo}/{machineUrl}";

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}

