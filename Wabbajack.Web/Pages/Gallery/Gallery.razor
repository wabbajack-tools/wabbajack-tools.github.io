@page "/gallery"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.ModlistArchiveSearch
@using Wabbajack.Web.Pages.ModlistInfo
@using Wabbajack.Web.Utils
@using System.Threading
@using System.Text.RegularExpressions
@inject IStateContainer StateContainer;
@inject GalleryState GalleryState;
@implements IDisposable

<PageTitle>Gallery | Wabbajack</PageTitle>

<div class="px-1 md:p-8 flex-grow">
    <h1 class="font-semibold my-1 text-4xl text-center">Gallery</h1>

    <div class="flex flex-wrap items-end justify-end md:gap-4 bg-wabbajack-cards-background-base rounded-md my-2">
        <label for="show-nsfw" class="w-full md:w-auto font-semibold text-lg inline-flex items-center m-1">
            Show NSFW:
            <TriCheckboxComponent @bind-State="GalleryState.NSFWState" id="show-nsfw" class="ml-2 h-10 w-5"/>
        </label>

        <label for="show-unofficial" class="w-full md:w-auto font-semibold text-lg inline-flex items-center m-1">
            Show non featured Lists:
            <TriCheckboxComponent @bind-State="GalleryState.ShowUnofficial" id="show-unofficial" class="ml-2 h-10 w-5"/>
        </label>


        <label for="select-game" class="w-full md:w-auto font-semibold text-lg inline-flex items-center my-1 pr-1">
            <p class="mr-2">Select Game:</p>
            <select @bind="GalleryState.SelectedGame" id="select-game" class="will-change-auto h-10 p-2 text-white bg-wabbajack-background-darker rounded-md">
                <option value="@GalleryState.All">@GalleryState.All</option>

                @foreach (var game in AllGames)
                {
                    <option value="@game">@game</option>
                }
            </select>
        </label>
    </div>
    <div class="mb-5 flex flex-wrap gap-3 bg-wabbajack-cards-background-base rounded-md my-2 p-2">

        @foreach (var (tagName, modlistCount) in AllTags)
        {
            var tagSelected = GalleryState.SelectedTags.Contains(tagName, StringComparer.OrdinalIgnoreCase);
            var selectedStyles = tagSelected ? "bg-wabbajack-purple-dark text-white" : "";
            <div @key="tagName" class="flex items-center justify-center rounded-2xl px-2 py-1 border-2 border-gray-200 @(selectedStyles)">
                <button @onclick="@(() => SelectTag(tagName))">
                    @tagName (@modlistCount.ToString())
                </button>
            </div>
        }
    </div>

    @if (_errorLoadingModlists)
    {
        @ErrorComponent.RenderError("Unable to load Modlists from Github!")
    }
    else if (!_modlists.Any())
    {
        @LoadingComponent.RenderLoadingThing("Loading Modlists...")
    }
    else
    {
        <div class="grid gap-4 grid-cols-1 md:grid-cols-2 xl:grid-cols-3 3xl:grid-cols-4 items-start">
            @foreach (var modlist in FilteredModlists)
            {
                <section @key="modlist.NamespacedName" class="bg-wabbajack-cards-background-base rounded-md shadow-md h-full flex flex-col">
                    @_renderModlistInfo(modlist)
                </section>
            }
        </div>
    }
</div>

@code {
    public const string Route = "/gallery";

    private readonly CancellationTokenSource _cts = new();

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private List<ModlistMetadata> _modlists = new();

    private IEnumerable<ModlistMetadata> FilteredModlists => _modlists
        .Where(x => !x.ForceDown)
        .Where(x =>
        {
            // filter NSFW
            return GalleryState.NSFWState switch
            {
                // exclude NSFW modlists
                TriCheckboxComponent.TriCheckboxState.False => !x.NSFW,
                // include NSFW modlists
                TriCheckboxComponent.TriCheckboxState.True => true,
                // only NSFW modlists
                TriCheckboxComponent.TriCheckboxState.Indeterminate => x.NSFW,
                _ => throw new ArgumentOutOfRangeException()
            };
        })
        .Where(x =>
        {
            // filter Unofficial
            return GalleryState.ShowUnofficial switch
            {
                // show official modlists
                TriCheckboxComponent.TriCheckboxState.False => x.Official,
                // include unofficial modlists
                TriCheckboxComponent.TriCheckboxState.True => true,
                // only unofficial modlists
                TriCheckboxComponent.TriCheckboxState.Indeterminate => !x.Official,
                _ => throw new ArgumentOutOfRangeException()
            };
        })
        .Where(x =>
        {
            // filter by game
            if (GalleryState.SelectedGame == GalleryState.All) return true;
            return x.Game == _gamesByName[GalleryState.SelectedGame];
        })
        .Where(x =>
        {
            // filter by tag
            if (GalleryState.SelectedTags.Count == 0) return true;
            return GalleryState.SelectedTags.All(tag => x.Tags.Contains(tag, StringComparer.OrdinalIgnoreCase));
        });

    private Dictionary<string, Game> _gamesByName = new();

    private IEnumerable<string> AllGames => _gamesByName
        .Select(x => x.Key)
        .OrderBy(x => x, StringComparer.OrdinalIgnoreCase);

    // ReSharper disable once ConditionIsAlwaysTrueOrFalse
    private Dictionary<string, int> AllTags => FilteredModlists
        .Where(x => x.Tags is not null)
        .SelectMany(x => x.Tags)
        .Distinct(StringComparer.OrdinalIgnoreCase)
        .OrderBy(x => x, StringComparer.OrdinalIgnoreCase)
        .Select(x => (x, FilteredModlists.Count(y => y.Tags.Contains(x, StringComparer.OrdinalIgnoreCase))))
        .ToDictionary(x => x.x, x => x.Item2, StringComparer.OrdinalIgnoreCase);

    private bool _errorLoadingModlists;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GalleryState.GetValuesFromQueryString();
            GalleryState.UpdateQueryString();

            var res = await StateContainer.LoadData(_cts.Token);
            if (!res)
            {
                _errorLoadingModlists = true;
                return;
            }

            res = await StateContainer.LoadData(_cts.Token);
            if (!res)
            {
                _errorLoadingModlists = true;
                return;
            }

            _modlists = StateContainer.GetAllModlists().OrderBy(_ => Guid.NewGuid()).ToList();

            _gamesByName = _modlists
                .Select(x => x.Game)
                .Distinct()
                .ToDictionary(x => x.GetDescription(), x => x, StringComparer.OrdinalIgnoreCase);

            if (GalleryState.SelectedGame != GalleryState.All && !_gamesByName.ContainsKey(GalleryState.SelectedGame))
                GalleryState.SelectedGame = GalleryState.All;
        }
        finally
        {
            _shouldRender = true;
        }
    }

    private void SelectTag(string tag)
    {
        if (tag == string.Empty) return;

        if (GalleryState.SelectedTags.Contains(tag))
            GalleryState.SelectedTags.Remove(tag);
        else
            GalleryState.SelectedTags.Add(tag);

        GalleryState.UpdateQueryString();
    }

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private readonly RenderFragment<ModlistMetadata> _renderModlistInfo = modlist => __builder =>
    {
        var readme = modlist.Links.Readme;
        var discordLink = modlist.Links.DiscordURL;
        var discordRegex = @"(https?:\/\/)?(www\.)?(discord\.(gg|com|io|me|li)|discordapp\.com\/invite)\/.+[a-z]";
        var viewLink = LinkUtils.CanRenderReadme(readme)
            ? ModlistInfo.CreateRedirect(modlist.RepositoryName, modlist.Links.MachineURL)
            : readme;
        var archiveSearchLink = ModlistArchiveSearch.CreateRedirect(modlist.RepositoryName, modlist.Links.MachineURL);

        @if (modlist.ValidationSummary.SmallImage != null)
        {
            <img src="@modlist.ValidationSummary.SmallImage"
                 alt="Image of the Modlist @modlist.Title"
                 loading="lazy"
                 crossorigin="anonymous"
                 class="rounded-t-md"/>
        }
        else
        {
            <img src="https://raw.githubusercontent.com/wabbajack-tools/wabbajack/main/Wabbajack.Launcher/Assets/Wabba_Mouth_Small.png"
                 alt="Image of the Modlist @modlist.Title"
                 loading="lazy"
                 crossorigin="anonymous"
                 class="rounded-t-md"/>
        }

        <div class="p-4 flex-grow flex flex-col">
            <div class="flex flex-row content-center">
                <h2 class="font-title font-semibold text-2xl flex flex-row content-center">
                    @modlist.Title
                    @if (@modlist.Official)
                    {
                        <p class="text-xs text-white bg-wabbajack-purple-dark rounded-md px-1 h-4 ml-1">Featured List</p>
                    }
                </h2>

            </div>

            <h3 class="font-subtitle font-light text-lg">Created by @modlist.Author</h3>
            <p class="mt-1 font-normal text-base">@modlist.Description</p>
            <div class="mt-auto">
                <p class="mt-2 font-medium text-md">Game: @modlist.Game.GetDescription()</p>

                <div class="flex flex-wrap gap-1">
                    <p class="font-medium text-md">Tags:</p>
                    @foreach (var tag in modlist.Tags.Distinct())
                    {
                        <p @key="tag" class="text-white bg-wabbajack-purple-dark rounded-md px-2">@tag</p>
                    }
                </div>

                <div class="mt-4 flex flex-nowrap justify-between">
                    <div>
                        <a href="@archiveSearchLink" class="py-1 px-5 mr-1 font-semibold rounded-lg shadow-md text-white hover:bg-wabbajack-purple-dark bg-wabbajack-cards-background-hover">
                            Archive Search
                        </a>
                    </div>
                    <div>
                        @if (discordLink != null && Regex.Match(discordLink, discordRegex, RegexOptions.IgnoreCase).Success)
                        {
                            <a href="@discordLink" class="py-1 px-5 ml-1 font-semibold rounded-lg shadow-md text-white hover:bg-wabbajack-purple-dark bg-wabbajack-cards-background-hover">
                                Discord
                            </a>
                        }
                        <a href="@viewLink" class="py-1 px-5 ml-1 font-semibold rounded-lg shadow-md text-white hover:bg-wabbajack-purple-dark bg-wabbajack-cards-background-hover">
                            Details
                        </a>
                    </div>
                </div>
            </div>
        </div>
    };

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
