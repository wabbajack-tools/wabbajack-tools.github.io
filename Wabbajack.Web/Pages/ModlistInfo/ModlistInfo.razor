@page "/modlist/{repositoryName}/{modlistName}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Utils
@using System.Threading
@inject IStateContainer StateContainer;
@inject NavigationManager NavigationManager;
@inject HttpClient Client;
@implements IDisposable

<div class="flex-grow">
    <!-- TODO: back button -->

    @if (_modlist == null)
    {
        if (_errorLoadingModlists)
        {
            @ErrorComponent.RenderError("Unable to load Modlists from GitHub!")
        }
        else if (_errorFindingModlist)
        {
            @ErrorComponent.RenderError($"Found no matching Modlist \"{RepositoryName}/{ModlistName}\"")
        }
        else
        {
            @LoadingComponent.RenderLoadingThing("Loading Modlist")
        }
    }
    else
    {
        <PageTitle>@_modlist.Title | Wabbajack</PageTitle>

        <div class="pt-6 px-2 max-w-6xl mx-auto bg-wabbajack-cards-background-base">
            <img src="@_modlist.Links.ImageUri"
                 alt="Image of the Modlist @_modlist.Title"
                 class="max-w-full mx-auto"
                 loading="eager"
                 crossorigin="anonymous"/>
            <p>Created by @_modlist.Author, current Version: @_modlist.Version</p>
            @MarkdownComponent.RenderMarkdown(_readme)
        </div>
    }
</div>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public string RepositoryName { get; set; }

    [Parameter]
    public string ModlistName { get; set; }

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private ModlistMetadata _modlist;
    private string _readme;

    private bool _errorLoadingModlists;
    private bool _errorFindingModlist;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (RepositoryName is null || ModlistName is null) return;

            var res = await StateContainer.LoadData(_cts.Token);
            if (!res)
            {
                _errorLoadingModlists = true;
                return;
            }


            var modlist = StateContainer.GetAllModlists().FirstOrDefault(x => x.Links.MachineURL.Equals(ModlistName, StringComparison.OrdinalIgnoreCase));
            if (modlist is null)
            {
                _errorFindingModlist = true;
                return;
            }

            _modlist = modlist;

            if (!LinkUtils.CanRenderReadme(_modlist.Links.Readme))
            {
                NavigationManager.NavigateTo(modlist.Links.Readme);
                return;
            }

            _readme = await Client.GetStringAsync(_modlist.Links.Readme, _cts.Token);
            var currentUrl = NavigationManager.Uri;
            var noAnchorUrl = currentUrl.Contains("#") ? currentUrl.Substring(0,currentUrl.LastIndexOf("#", StringComparison.Ordinal)) : currentUrl;

            _readme = noAnchorUrl + " " + _readme;

        }
        finally
        {
            _shouldRender = true;
        }
    }

    public static string CreateRedirect(string repo, string machineUrl) => $"/modlist/{repo}/{machineUrl}";

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
