@page "/status"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.DetailedStatus
@using System.Threading
@inject IStateContainer StateContainer;
@implements IDisposable

<PageTitle>Status Dashboard | Wabbajack</PageTitle>

<div class="px-1 md:p-16 flex-grow">
    <p class="font-bold text-xl">Failing Modlists: @Failing.ToString()</p>
    <p class="font-bold text-xl">Succeeding Modlists: @Succeeding.ToString()</p>
    <p class="font-bold text-xl">Skipped Modlists: @ForcedDown.ToString()</p>

    @if (_errorLoadingModlists)
    {
        @ErrorComponent.RenderError("Unable to load Modlists from GitHub!")
    } else if (!ModlistSummaries.Any())
    {
        @LoadingComponent.RenderLoadingThing("Loading Modlists...")
    }
    else
    {
        <div class="my-1 grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            @foreach (var modlistSummary in OrderedModlistSummaries)
            {
                <div @key="modlistSummary.MachineURL">
                    @_renderModlistSummary(modlistSummary)
                </div>
            }
        </div>
    }
</div>

@code {
    public const string Route = "/status";

    private readonly CancellationTokenSource _cts = new();

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private IEnumerable<ModListSummary> ModlistSummaries => StateContainer.ModlistSummaries
        .Select(x => x.Value);
    private IEnumerable<ModListSummary> OrderedModlistSummaries => ModlistSummaries
        .OrderByDescending(x => x.HasFailures)
        .ThenBy(isForceDown)
        .ThenBy(x => x.Name, StringComparer.OrdinalIgnoreCase);

    private int Failing => ModlistSummaries.Count(x => x.HasFailures);
    private int ForcedDown => ModlistSummaries.Count(isForceDown);
    private int Succeeding => ModlistSummaries.Count(x => !x.HasFailures);

    private bool _errorLoadingModlists;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await StateContainer.LoadData(_cts.Token);
            if (!res)
            {
                _errorLoadingModlists = true;
            }
        }
        finally
        {
            _shouldRender = true;
        }
    }

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private readonly RenderFragment<ModListSummary> _renderModlistSummary = modlistSummary => __builder =>
    {
        var detailedStatusLink = DetailedStatusPage.CreateRedirect(modlistSummary.MachineURL);
        //var time = modlistSummary.Checked.ToLocalTime();


        var bgClass = modlistSummary.HasFailures ? "bg-wabbajack-red" : (isForceDown(modlistSummary) ? "bg-wabbajack-cards-background-base" : "bg-wabbajack-cards-background-hover");
        <div class="@bgClass text-white rounded-md shadow-md">
            <div class="p-2">
                <a href="@detailedStatusLink" class="font-semibold text-lg hover:underline">@modlistSummary.Name</a>
                @if (isForceDown(modlistSummary))
                {
                    <p>List Validation skipped.</p>
                    <p>This can be set intentionally!</p>
                }
                else
                {
                    <p>Passed: @modlistSummary.Passed.ToString()</p>
                    <p>Failed: @modlistSummary.Failed.ToString()</p>
                }

            </div>
        </div>
    };
    private static bool isForceDown(ModListSummary modListSummary)
    {
        return modListSummary.Passed.Equals(0) && modListSummary.Failed.Equals(0);
    }


    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
