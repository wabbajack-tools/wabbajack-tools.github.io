@page "/status/{repositoryName}/{modlistName}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs.ServerResponses
@using Wabbajack.DTOs.ModListValidation
@using Wabbajack.DTOs
@using System.Threading
@inject IStateContainer StateContainer;
@implements IDisposable

<div class="px-1 md:p-16 md:pb-6 flex-grow">
    @if (_modlistStatus is null)
    {
        @if (_errorLoadingStatusReport)
        {
            @ErrorComponent.RenderError($"Error loading status report for {MachineUrl}")
        }
        else if (_errorFindingStatusReport)
        {
            @ErrorComponent.RenderError($"Error finding status report for {MachineUrl}")
        }
        else
        {
            @LoadingComponent.RenderLoadingThing("Loading status report...")
        }
    }
    else
    {
        <PageTitle>@_modlistStatus.Name Status | Wabbajack</PageTitle>

        <div class="max-w-6xl mx-auto">
            <p class="mb-1 font-bold text-xl">@_modlistStatus.Name</p>
            <div class="flex-grow">
                <p class="mb-2 font-medium text-lg">Failing Archives (@FailingArchives.Count.ToString())</p>
                <div class="overflow-y-auto" style="height: @FailingArchivesHeight;">
                    <Virtualize Items="FailingArchives" Context="archive" TItem="Archive">
                        <p @key="archive.Name" class="font-light">@archive.Name</p>
                    </Virtualize>
                </div>
            </div>
            <div class="flex-grow">
                <p class="mt-3 mb-2 font-medium text-lg">Succeeding Archives (@SucceedingArchives.Count.ToString())</p>
                <div class="overflow-y-auto" style="height: @SucceedingArchivesHeight;">
                    <Virtualize Items="SucceedingArchives" Context="archive" TItem="Archive">
                        <p @key="archive.Name" class="font-light">@archive.Name</p>
                    </Virtualize>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter] public string RepositoryName { get; set; }

    [Parameter] public string ModlistName { get; set; }

    private string MachineUrl => $"{RepositoryName}/{ModlistName}";

    private const int ItemSize = 24;
    private const int MaxItemListSize = 400;
    private const int MaxItems = MaxItemListSize / ItemSize;

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private ValidatedModList _modlistStatus;
    private List<Archive> FailingArchives => _modlistStatus.Archives.Where(x => x.Status == ArchiveStatus.InValid).Select(x => x.Original).ToList();
    private List<Archive> SucceedingArchives => _modlistStatus.Archives.Where(x => x.Status != ArchiveStatus.InValid).Select(x => x.Original).ToList();

    private string FailingArchivesHeight => $"{(Math.Min(FailingArchives.Count, MaxItems) * ItemSize).ToString()}px";
    private string SucceedingArchivesHeight => $"{(Math.Min(SucceedingArchives.Count, MaxItems) * ItemSize).ToString()}px";

    private bool _errorLoadingStatusReport;
    private bool _errorFindingStatusReport;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (RepositoryName is null || ModlistName is null) return;

            var res = await StateContainer.LoadStatusReport(MachineUrl, _cts.Token);
            if (!res)
            {
                _errorLoadingStatusReport = true;
                return;
            }

            if (!StateContainer.TryGetModlistStatusReport(MachineUrl, out var statusReport))
            {
                _errorFindingStatusReport = true;
                return;
            }

            _modlistStatus = statusReport;
        }
        finally
        {
            _shouldRender = true;
        }
    }

    public static string CreateRedirect(string namespacedName) => $"/status/{namespacedName}";

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

}
